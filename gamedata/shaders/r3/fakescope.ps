//credit to CrookR for the original implementation


#include "night_vision.h"
#include "common.h"

Texture2D s_scope;
uniform float4 m_hud_params; // zoom_rotate_factor, secondVP_zoom_factor, hud_fov, NULL
float4 eye_direction_lerp;
float4 eye_position_lerp;
float4 fakescope_params1; // power, inner blur, outer blur, brightness
float4 fakescope_params2; // chroma abber, fog attack(aim), fog attack(move), fog max travel
float4 fakescope_params3; // radius, relative fog radius, fog sharpness, scope sway amount

float getparallax(float d)
{
	return clamp(1 - pow(1 / fakescope_params3.x * fakescope_params3.y * d, fakescope_params3.z), 0, 1);
}

float2 clampMagnitude(float2 v, float l)
{
	return normalize(v) * min(length(v), l);
}

float2 fake_outer_parallax(float2 tc, float factor) 
{
	float2 ndc = tc * 2.0 - 1.0;
	float scl = ndc * factor + (sign(ndc.x) * (1.0-factor));
	float tcx = scl * 0.5 + 0.5;
	return float2(tcx, tc.y);
}

float mag_between_fovs(float x, float y) {
	return 1.0 / (tan(y/2.0) / tan(x/2.0));
}

static const float TO_RADIANS = 3.14159/180.0;

float get_fov() {
	return 2.0 * atan(1.0/m_P[1][1]);
}

// scope_factor is encoded like so: F.FRRRR
//   where F.F is what the player wants
//   and RRRR is the desired FOV in radians
//   player scope_factor is restricted to 0.1->0.9 range. Precision errors otherwise
//   FIXME: <0.5 player scope factor is causing precision loss
float calculate_scope_factor() {
	float player_scope_factor = floor(fakescope_params1.x * 10.0) / 10.0;

	float want_fov = frac(fakescope_params1.x * 10.0) * 10.0;
    float have_fov = get_fov();

	// This is the amount of extra magnification we need to correct for the zoom over time.
	float magnification_error = mag_between_fovs(want_fov, have_fov);

	return player_scope_factor
		 * magnification_error;
}

// HUD rotation and the overlay being shown are not in sync
//   the overlay can display before the rotation is complete.
//   this causes a single frame with an incorrectly zoomed out view
//   lowering this estimate will show the scope effect early
//   0.90 seems to be a good value for supporting down to 30 fps
static const float HUD_ROTATE_END_ESTIMATE = 0.90;

float4 main(p_screen I,  float4 pos2d : SV_POSITION) : SV_Target
{
	float scope_factor = calculate_scope_factor();
	
	float inner_blur = fakescope_params1.y * scope_factor;
	float chromatic_abberation = fakescope_params2.x * scope_factor;

	if(m_hud_params.x > 0 && fakescope_params3.x > 0)
	{
		float3 image;
		float2 corrected_texturecoords = aspect_ratio_correction(I.tc0);
		
		// get velocity
		float2 eye_velocity = clampMagnitude((mul(m_VP, eye_direction_lerp) * fakescope_params2.y) + (mul(m_VP, eye_position_lerp) * fakescope_params2.z), fakescope_params2.w);
		
		// parallax
		float2 parallax_offset = float2(0.5f + eye_velocity.x, 0.5f - eye_velocity.y);
		float distToParallax = distance(corrected_texturecoords, parallax_offset);
		
		// scope offset
		float2 scope_center = float2(0.5f, 0.5f);
		float distToCenter = distance(corrected_texturecoords, scope_center);
		float4 scope = s_scope.Sample(smp_nofilter, (I.tc0 * float2(1, 0.5625f)));

		float3 half_res_blur = s_blur_2.Sample(smp_base, I.tc0).rgb;
		
		if(step(distToCenter, fakescope_params3.x) == 1 && m_hud_params.x >= HUD_ROTATE_END_ESTIMATE)
		{
			I.tc0 = (I.tc0 - 0.5) * scope_factor + 0.5;
			
			image.r = s_image.Sample(smp_base, I.tc0 + (float3(-chromatic_abberation, 0, 0) * distToCenter)).r;
			image.b = s_image.Sample(smp_base, I.tc0 + (float3( chromatic_abberation, 0, 0) * distToCenter)).b;
			image.g = s_image.Sample(smp_base, I.tc0).g;

			//fixme: texture coordinates are wrong for blur sample
			//image = lerp(image, half_res_blur, inner_blur);

			// Don't sample from outside framebuffer
			float2 o = step(1, abs(I.tc0 * 2.0 - 1.0));
			image.rgb *= 1 - max(o.x, o.y);
			
			image.rgb *= getparallax(distToParallax);
					  //* (oov < 0.0 || oov > 1.0 ? 0.0 : 1.0);  //Don't sample outside texture (inverted magnification)
		}
		else
		{	
			/*
			// Effect needs to occur during fov change, or it looks weird.
			float2 tc = fake_outer_parallax(I.tc0, .90);
			tc = lerp(I.tc0, tc, m_hud_params.x);
			/*/
			float2 tc = I.tc0;
			//*/

		
			image = s_image.Sample(smp_base, tc).xyz;
			image = lerp(image, half_res_blur, m_hud_params.x * fakescope_params1.z) * (1 - (m_hud_params.x * (1 - fakescope_params1.w)));
		}
		
		if(m_hud_params.x >= 1.0)
		{
			image = lerp(image, scope, scope.a);
		}
		
		return float4(image, 1.0);
	}
	else
	{
		return float4(s_image.Sample(smp_base, I.tc0).xyz, 1.0);
	}
} 

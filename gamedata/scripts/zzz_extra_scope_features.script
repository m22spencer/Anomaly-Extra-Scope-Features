-- to add magnifications via DLTX (check console after zooming weapon for names)
-- ![scope_or_weapon_name]
-- magnifications = 2, 3.5, 6




-- patch to change the conversion of scope config information
function scope_zoom_factor_to_magnification(szf)
    return 60 / szf
end

local to_rads = 3.14159 / 180
local to_degs = 1 / to_rads

-- conversions -------------------------------------------------------------------------
-- FIXME: these are not quite correct, need to dig through xray-monolith project
function mag_to_fov(cur_fov, mag)
	return (2 * math.atan( math.tan(cur_fov*to_rads/2) * (1/mag) )) * to_degs
end

-- x and y are in degrees
function mag_between_fovs(x, y)
    x = x * to_rads
    y = y * to_rads

    return 1 / (math.tan(y/2) / math.tan(x/2))
end

-- TODO: reverse the formula in xray-monolith to double check. This seems to work though
function fov_to_zoomfactor(fov)
	return fov / 0.75
end

function zoomfactor_to_fov(zf)
	return zf * 0.75
end
-- end conversions

local floatg = "(%d*%.?%d*)"

local p_mag   = "^" .. floatg .. "$"
local p_mag_r = "^" .. floatg .. "-" .. floatg .. "$"
function parse_magnification(str)
    str = str:gsub("%s+", "")
    local l,h = str:match(p_mag_r)
    l = tonumber(l or str:match(p_mag))
    h = tonumber(h)

    return l and h
        and {l = l, h = h}
        or l
end

function read_magnifications(section)
    local magnifications = ini_sys:r_list(section, "magnifications")
    if magnifications then
        for k,v in pairs(magnifications) do
            magnifications[k] = parse_magnification(v)
        end
    end
    return magnifications
end

function active_2d_scope()
    local item = db.actor:active_item()
    local weapon = item and item:cast_Weapon()
    if weapon then 
        if not weapon:IsZoomed() then
            return nil
        end
        local zoomtype = weapon:GetZoomType()

        if zoomtype == 0 then
            local scope = utils_item.get_attached_scope(item)
            if scope then
                local zf = ini_sys:r_float_ex(scope, "scope_zoom_factor") or ini_sys:r_float_ex(item:section(), "scope_zoom_factor")
                return { weapon            = item:section()
                       , scope             = scope
                       , max_magnification = zf and scope_zoom_factor_to_magnification(zf)
                       , magnifications    = read_magnifications(scope) or read_magnifications(item:section())
                       , dynamic_zoom      = ini_sys:r_bool_ex(scope, "scope_dynamic_zoom") or ini_sys:r_float_ex(item:section(), "scope_dynamic_zoom") } 
            else
                local section = item:section()
                local id = item:id()
                local zf = utils_item.get_param(section, id, "scope_zoom_factor", "float")
                return { weapon            = item:section()
                        , max_magnification = zf and scope_zoom_factor_to_magnification(zf)
                        , magnifications    = read_magnifications(section)
                        , dynamic_zoom      = utils_item.get_param(section, id, "scope_dynamic_zoom", "bool") }
            end
        else
            -- grenade launcher or alternate sight
            return nil
        end
    end
end

local zoom_cache = {}
local info = nil

function actor_on_update() 
    local item = db.actor:active_item()
    local weapon = item and item:cast_Weapon()
    if info and item and weapon then 
        if not zoom_cache[item:id()] then 
            zoom_cache[item:id()] = 0.0;
        end
        local magnification = (info.dynamic_zoom and zoom_cache[item:id()] or 1) * (info.max_magnification - 1) + 1

        if info.magnifications then 
            local mag1 = info.magnifications[1]
            if not tonumber(mag1) then
                

                local frac = zoom_cache[item:id()];
                magnification = (mag1.h - mag1.l) * frac + mag1.l;
            else
                local levels = size_table(info.magnifications);
                local index = math.floor(1 + zoom_cache[item:id()] * (levels - 1));

                magnification = tonumber(info.magnifications[index] or magnification)
            end
        end

        local scope_factor = get_console():get_float("scope_factor");
        local player_scope_factor = clamp(math.floor(scope_factor * 10), 1, 9) / 10;
        local max_pip_magnification = 1.0/player_scope_factor;

        local pip_magnification = math.min( magnification
                                          , max_pip_magnification)

        local remaining_magnification = magnification / pip_magnification

        local fov_factor = mag_to_fov( get_console():get_float("fov")
                                     , remaining_magnification)

        local zoom_factor  = fov_to_zoomfactor(fov_factor)

        local want_fov = zoomfactor_to_fov(zoom_factor) * to_rads;

        -- Encode scope_factor, see shader for details
        local encoded = player_scope_factor
            + (want_fov/100.0);

        scope_factor = zoomfactor_to_fov(zoom_factor) * to_rads
        exec_console_cmd("scope_factor " .. encoded)
        weapon:SetZoomFactor(zoom_factor)
    
        if false then 
            printf( " mag: " .. magnification .. "x"
                .. " pip: " .. pip_magnification .. "x"
                .. " zoom: " .. remaining_magnification .. "x"
                .. " zoom_factor: " .. zoom_factor
                .. " scope_factor: " .. scope_factor
                )
        end
    end
end

function on_mouse_wheel(scroll_dir, flags) 
    if info and scroll_dir then
        local mag_levels = info.magnifications and tonumber(info.magnifications[1])
            and (size_table(info.magnifications)-1)
            or get_console():get_float("zoom_step_count")

        local zoom_step = 1 / mag_levels

        local scroll_delta = scroll_dir * 2 - 1;

        local item = db.actor:active_item()
        zoom_cache[item:id()] = clamp((zoom_cache[item:id()] or 0) + scroll_delta * zoom_step, 0, 1)
        flags.ret_value = false
    end
end

local mwheel_supported_ver	= 20230701
local mwheel_avail 			= MODDED_EXES_VERSION and (MODDED_EXES_VERSION >= mwheel_supported_ver)

function on_game_start()
    -- Compatibility patches
    if scopes_as_binocs then
        -- sets the zoom factor, which overrides our fixes
        scopes_as_binocs.actor_on_update = function() end
    end
    if zoomed_out_scope_draw then
        zoomed_out_scope_draw.actor_on_weapon_zoom_in = function() end
        zoomed_out_scope_draw.actor_on_weapon_zoom_out = function() end
    end

	RegisterScriptCallback("actor_on_update", actor_on_update)
    if mwheel_avail then
		RegisterScriptCallback("on_mouse_wheel",on_mouse_wheel)
	end

    RegisterScriptCallback("actor_on_weapon_zoom_out", function()
        info = nil
    end)

    RegisterScriptCallback("actor_on_weapon_zoom_in", function()
        info = active_2d_scope()
        if info then
            local mag_string
            if info.magnifications then
                local m_str = ""
                for k,v in pairs(info.magnifications) do
                    m_str = m_str .. (tonumber(v) or (v.l .. "-" .. v.h)) .. "X "
                end
                mag_string = "Magnifications: " .. tostring(info.magnifications and m_str)
            else
                if info.dynamic_zoom then 
                    mag_string = "Magnifications(zf): 1-" .. tostring(info.max_magnification) .. "X"
                else
                    mag_string = "Magnifications(zf): " .. tostring(info.max_magnification) .. "X"
                end
            end

            printf("Weapon: " .. info.weapon .. (info.scope and (" Scope: " .. info.scope) or "") .. " " .. mag_string)
        end
        if not (info.max_magnification or info.magnifications) then
            info = nil
        end
    end)
end
